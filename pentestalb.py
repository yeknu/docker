#from time import sleep
import curses, os

screen = curses.initscr()
curses.noecho()
curses.start_color()
screen.keypad(1)
curses.init_pair(1, curses.COLOR_BLACK, curses.COLOR_WHITE)

selected= curses.color_pair(1)
normal = curses.A_NORMAL
menu_data = {
	'title': "PenTestLab", 'type':"menu", 'subtitle' : "Selecciona una opcion...",
	'options':[
		{'title':"Docker's",'type' : "menu", 'subtitle' : "Selecciona una opcion",
		'options':[
			{'title':"Burp", 'type' : "command", 'command' : 'gnome-terminal -x sh -c "./Burp/rundocker.sh"' },
#			{'title':"Chromium", 'type' : "command", 'command' : 'gnome-terminal -x sh -c "./Chromium/rundocker.sh"' },
			{'title':"Metasploit", 'type' : "command", 'command' : 'gnome-terminal -x sh -c "./Metasploit/rundocker.sh"'},
			{'title':"Nessus", 'type' : "command", 'command' : 'gnome-terminal -x sh -c "./Nessus/rundocker.sh"' },
			{'title':"Responder", 'type' : "command", 'command' : 'gnome-terminal -x sh -c "./Responder/rundocker.sh"' },
#			{'title':"Zap", 'type' : "command", 'command' : 'gnome-terminal -x sh -c "./Zap/rundocker.sh"' },
		]},
		{'title':"Ver todos los contenedores", 'type' : "command", 'command' : 'docker ps -a | less'},
		{'title':"Ver todas las imagenes", 'type' : "command", 'command' : 'docker images | less'},
		{'title':"Eliminar todos los contenedores", 'type' : "command", 'command' : './eliminar_todos_los_contenedores.sh'},
		{'title':"Eliminar todas las imagenes", 'type' : "command", 'command' : './eliminar_todas_las_imagenes.sh'},
	]}

def runmenu(menu, parent) :
	if parent is None:
		lastoption = "Exit"
	else :
		lastoption = "Return to %s menu" % parent['title']
	optioncount = len(menu['options'])
	pos = 0
	oldpos = None
	x = None

	while x!= ord('\n'):
		if pos != oldpos:
			oldpos = pos
			screen.border(0)
			screen.addstr(2, 2, menu['title'], curses.A_STANDOUT)
			screen.addstr(4, 2, menu['subtitle'], curses.A_BOLD)
			for index in range(optioncount):
				textstyle = normal
				if pos == index :
					textstyle = selected
				screen.addstr(5 + index, 4, "%d - %s" % (index + 1, menu['options'][index]['title']), textstyle)
			textstyle = normal
			if pos == optioncount :
				textstyle = selected
			screen.addstr( 5 + optioncount, 4, "%d - %s" % (optioncount + 1, lastoption), textstyle)
			screen.refresh()
		x = screen.getch()
		if x >= ord('1') and x <= ord(str(optioncount + 1)):
				pos = x - ord('0') - 1
				x = ord('\n')
		elif x == 258: # flecha arriba
			if pos < optioncount :
				pos = pos + 1
			else: pos = 0
		elif x == 259 : #flecha abajo
			if pos > 0:
				pos = pos - 1
			else: pos = optioncount
	return pos


def processmenu(menu, parent=None) :
	optioncount = len(menu['options'])
	exitmenu = False
	while not exitmenu:
		getin = runmenu(menu, parent)
		if getin == optioncount :
			exitmenu = True
		elif menu['options'][getin]['type'] == "command" :
			curses.def_prog_mode()
			os.system('reset')
			screen.clear()
			os.system(menu['options'][getin]['command'])
			screen.clear()
			curses.reset_prog_mode()
			curses.curs_set(1)
			curses.curs_set(0)
		elif menu['options'][getin]['type'] == "menu" :
			screen.clear()
			processmenu(menu['options'][getin], menu)
			screen.clear()
		elif menu['options'][getin]['type'] == "EXITMENU" :
			exitmenu = True

processmenu(menu_data)
curses.endwin()
os.system('clear')
